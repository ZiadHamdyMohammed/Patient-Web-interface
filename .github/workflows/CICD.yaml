name: Deploy Patient Web  Application 
run-name: Deploy Patient Web by ${{ github.actor }} and Event is ${{ github.event_name }}

on: 
  push:
    branches:
      - main
    
jobs:
  CI-Backend:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 

      - name: Install Requirements
        working-directory: ./project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Linting 
        working-directory: ./project
        run: |
          pip install flake8
          flake8 .
        continue-on-error: true

      - name: Testing 
        working-directory: ./project
        run: | 
          pip install pytest
          pytest 
        continue-on-error: true

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Docker 
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./project/
          push: true
          tags: ziahamdymohammed/patientinterface:${{ github.run_number }}
  CD-Deploy:
    needs: [CI-Backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
          
      - name: Get EC2 IP
        id: ec2-ip
        run: |
          cd terraform
          echo "ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Install Minikube and Deploy App
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ steps.ec2-ip.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            
            # Install kubectl if not present
            if ! command -v kubectl &> /dev/null; then
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            fi
            
            # Install Minikube if not present
            if ! command -v minikube &> /dev/null; then
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
              minikube start --driver=docker
            fi
            
            # Apply Kubernetes manifests
            kubectl apply -f k8s/
            
            # Update deployment with new image
            kubectl set image deployment/patient-web patient-web=bagato220/PatientInterface:${{ github.run_number }}
            
            # Wait for deployment to complete
            kubectl rollout status deployment/patient-web --timeout=90s
            
            # Start port-forwarding in background
            nohup kubectl port-forward service/patient-web-service 8000:8000 > /dev/null 2>&1 &
            
            # Verify application
            sleep 10
            curl -I http://localhost:8000